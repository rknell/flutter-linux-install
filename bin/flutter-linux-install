#!/bin/bash

# Get the directory where the script is installed
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

# Source the library functions
source "$SCRIPT_DIR/../lib/flutter-linux-install/functions.sh"

# Help function
show_help() {
    echo "Flutter Linux Application Installer"
    echo
    echo "Usage: $0 [options]"
    echo
    echo "Options:"
    echo "  -p, --project DIR      Flutter project directory (default: current directory)"
    echo "  -n, --name NAME        Application name (default: derived from pubspec.yaml)"
    echo "  -d, --dir DIR          Installation directory (default: detected per distro)"
    echo "  -i, --icon FILE        Icon file to use (png/svg, will be auto-resized)"
    echo "  --no-desktop           Skip desktop file installation"
    echo "  -h, --help            Show this help message"
    echo
    echo "If no project is specified, the current directory will be used"
    echo "If no name is provided, it will be extracted from pubspec.yaml"
    echo "If no icon is provided, will look for icons in linux/packaging/icons/"
}

# Default values
PROJECT_DIR="$PWD"
INSTALL_DIR=""  # Will be set by detect_distribution
INSTALL_DESKTOP_FILE=true
ICON_FILE=""
APP_NAME=""

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--project)
            PROJECT_DIR="$2"
            shift 2
            ;;
        -n|--name)
            APP_NAME="$2"
            shift 2
            ;;
        -d|--dir)
            INSTALL_DIR="$2"
            shift 2
            ;;
        -i|--icon)
            ICON_FILE="$2"
            shift 2
            ;;
        --no-desktop)
            INSTALL_DESKTOP_FILE=false
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
done

# Verify project directory exists
if [ ! -d "$PROJECT_DIR" ]; then
    echo "Error: Project directory not found: $PROJECT_DIR"
    exit 1
fi

# Change to project directory
cd "$PROJECT_DIR"

# Detect distribution and set defaults
detect_distribution

# Set installation directory if not specified
if [ -z "$INSTALL_DIR" ]; then
    INSTALL_DIR="$DEFAULT_INSTALL_DIR"
fi

# Find Flutter project root
PROJECT_ROOT=$(find_project_root)
if [ $? -ne 0 ]; then
    echo "Error: Not a Flutter project directory: $PROJECT_DIR"
    exit 1
fi

# Extract app name from pubspec.yaml if not provided
if [ -z "$APP_NAME" ]; then
    APP_NAME=$(extract_app_name "$PROJECT_ROOT")
    if [ $? -ne 0 ]; then
        echo "Error: Could not extract app name from pubspec.yaml"
        exit 1
    fi
fi

# Install the application
install_application "$PROJECT_ROOT" "$APP_NAME" "$INSTALL_DIR" "$INSTALL_DESKTOP_FILE" "$ICON_FILE" 